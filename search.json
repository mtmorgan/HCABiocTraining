[{"path":"https://mtmorgan.github.io/HCABiocTraining/articles/a-intro-to-r.html","id":"essential-r","dir":"Articles","previous_headings":"","what":"Essential R","title":"A. Introduction to R","text":"simple calculator ‘Vectors’ building blocks Variables, missing values ‘factors’ Data structures coordinate related vectors – data.frame Functions   ‘Vectorized’ operations, e.g., element-wise addition without explicit ‘’ loop  Write functions Iterate, usually lapply() although () available","code":"1 + 1 ## [1] 2 c(1, 2, 3) ## [1] 1 2 3 c(\"January\", \"February\", \"March\") ## [1] \"January\"  \"February\" \"March\" c(TRUE, FALSE) ## [1]  TRUE FALSE age <- c(27, NA, 32, 29) gender <- factor(     c(\"Female\", \"Male\", \"Non-binary\", NA),     levels = c(\"Female\", \"Male\", \"Non-binary\") ) df <- data.frame(     age = c(27, NA, 32, 29),     gender = gender ) df ##   age     gender ## 1  27     Female ## 2  NA       Male ## 3  32 Non-binary ## 4  29       <NA> rnorm(5)        # 5 random normal deviates ## [1]  2.1454460 -1.1874732  0.1516599 -0.5943870 -1.2713149 x <- rnorm(100) # 100 random normal deviates hist(x)         # histogram, approximately normal plot(density(x)) # a little more sophisticated? y <- x + rnorm(100) plot(y ~ x) fit <- lm(y ~ x) fit         # an R 'object' containing information about the ##  ## Call: ## lm(formula = y ~ x) ##  ## Coefficients: ## (Intercept)            x   ##     -0.1179       0.8909             # regression of y on x abline(fit) # plot points and fitted regression line anova(fit)  # statistical summary of linear regression ## Analysis of Variance Table ##  ## Response: y ##           Df Sum Sq Mean Sq F value    Pr(>F)     ## x          1  99.46   99.46  87.981 2.687e-15 *** ## Residuals 98 110.79    1.13                       ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 hello <- function(who) {     paste(\"hello\", who, \"with\", nchar(who), \"letters in your name\") } hello(\"Martin\") ## [1] \"hello Martin with 6 letters in your name\" names <- c(\"Martin\", \"Thomas\") lapply(names, hello) ## [[1]] ## [1] \"hello Martin with 6 letters in your name\" ##  ## [[2]] ## [1] \"hello Thomas with 6 letters in your name\""},{"path":"https://mtmorgan.github.io/HCABiocTraining/articles/a-intro-to-r.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"A. Introduction to R","text":"Extend functionality base R. Can part ‘base’ distribution… …contributed, e.g., dplyr introduce ‘tidyverse’ ‘tibble’ like ‘data.frame’, user-friendly tidyverse makes use ‘pipes’ |>. pipe takes left-hand side pass right-hand side. Key dplyr ‘verbs’ can piped together: filter() (rows), select() (columns), mutate() (change values), group_by() (operate groups rows) Another example: ggplot2 visualization","code":"## iterate over the numbers 1 through 8, 'sleeping' for 1 second ## each. Takes about 8 seconds... system.time({     lapply(1:8, function(i) Sys.sleep(1)) }) ##    user  system elapsed  ##   0.003   0.000   8.012  ## sleep in parallel -- takes only 2 seconds library(parallel) cl <- makeCluster(4) # cluster of 4 workers system.time({     parLapply(cl, 1:8, function(i) Sys.sleep(1)) }) ##    user  system elapsed  ##   0.002   0.000   2.083 library(dplyr) tbl <- tibble(     x = rnorm(100),     y = x + rnorm(100) )  ## e.g., only displays the first 10 rows tbl ## # A tibble: 100 × 2 ##         x       y ##     <dbl>   <dbl> ##  1 -0.242 -2.01   ##  2 -1.05  -0.0315 ##  3 -0.578 -3.11   ##  4 -1.23  -1.35   ##  5 -0.101 -0.217  ##  6 -0.820 -0.0341 ##  7  0.665  2.10   ##  8 -0.135 -0.486  ##  9  0.687  1.38   ## 10  0.518  1.09   ## # … with 90 more rows tbl |>     ## e.g., just rows with non-negative values of x and y     filter(x > 0, y > 0) |>     ## add a column     mutate(distance_from_origin = sqrt(x^2 + y^2)) ## # A tibble: 28 × 3 ##         x     y distance_from_origin ##     <dbl> <dbl>                <dbl> ##  1 0.665  2.10                 2.20  ##  2 0.687  1.38                 1.54  ##  3 0.518  1.09                 1.21  ##  4 0.440  1.84                 1.90  ##  5 0.747  1.68                 1.84  ##  6 1.83   2.00                 2.71  ##  7 0.0309 0.282                0.283 ##  8 1.14   0.664                1.32  ##  9 1.15   1.30                 1.73  ## 10 0.931  1.86                 2.08  ## # … with 18 more rows library(ggplot2) ggplot(tbl) +     aes(x, y) +                # use 'x' and 'y' columns for plotting...     geom_point() +             # ...plot points...     geom_smooth(method = \"lm\") # ...linear regresion ## `geom_smooth()` using formula 'y ~ x'"},{"path":"https://mtmorgan.github.io/HCABiocTraining/articles/a-intro-to-r.html","id":"help-vignettes","dir":"Articles","previous_headings":"","what":"Help & Vignettes","title":"A. Introduction to R","text":"Help pages, e.g., ?lm Vignettes, e.g., Google, StackOverflow, etc…","code":"vignette(package = \"ggplot2\") vignette(\"ggplot2-specs\", \"ggplot2\")"},{"path":"https://mtmorgan.github.io/HCABiocTraining/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Morgan. Author, maintainer.","code":""},{"path":"https://mtmorgan.github.io/HCABiocTraining/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan M (2022). HCABiocTraining: Introduction Human Cell Atlas Data Access & Analysis R / Bioconductor. R package version 0.0.1, https://mtmorgan.github.io/HCABiocTraining/.","code":"@Manual{,   title = {HCABiocTraining: Introduction to Human Cell Atlas Data Access & Analysis in R / Bioconductor},   author = {Martin Morgan},   year = {2022},   note = {R package version 0.0.1},   url = {https://mtmorgan.github.io/HCABiocTraining/}, }"},{"path":"https://mtmorgan.github.io/HCABiocTraining/index.html","id":"hcabioctraining","dir":"","previous_headings":"","what":"Introduction to Human Cell Atlas Data Access & Analysis in R /\n    Bioconductor","title":"Introduction to Human Cell Atlas Data Access & Analysis in R /\n    Bioconductor","text":"HCABiocTraining introduction Human Cell Atlas data retrieval analysis R / Bioconductor. focus single-cell RNA-seq data. wide range material covered, basic R advanced data analysis steps outlined ‘Orchestrating Single-Cell Analysis Bioconductor’ (OSCA). treatment superficial, hope unlocks opportunities reproducible, sophisticated analysis.","code":""},{"path":"https://mtmorgan.github.io/HCABiocTraining/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Introduction to Human Cell Atlas Data Access & Analysis in R /\n    Bioconductor","text":"Install necessary software GitHub :","code":"if (!\"BiocManager\" %in% rownames(installed.packages()))     install.packages(\"BiocManager\", repos = \"https://cran.r-project.org\") BiocManager::install(\"mtmorgan/HCABiocTraining\")"},{"path":"https://mtmorgan.github.io/HCABiocTraining/index.html","id":"articles","dir":"","previous_headings":"","what":"Articles","title":"Introduction to Human Cell Atlas Data Access & Analysis in R /\n    Bioconductor","text":"articles repository cover four main topics Introduction R. Scripting, core functions, contributed packages. HCA Data Access. Using hca cellxgenedp packages data retrieval. R Bioconductor Analysis Single-Cell Expression Data. Introduction key resources available analysis single-cell expression data. Seurat. SingleCellExperiment ‘Orchestrating Single-Cell Analysis Bioconductor’ (OSCA) Prospects spatial extended analysis.","code":""}]
